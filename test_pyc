#!/bin/tcsh 

#setenv VALGRIND 'valgrind -q'
setenv VALGRIND ' '

cd tests
set failed = 0
set expected_failed = 0
cp ../pyc_compat.py .
foreach g (*.py)
  if (-e $g.ignore) continue
  if (-e $g.flags) then
    set flags = `cat $g.flags`
  else
    set flags =
  endif
  $VALGRIND ../pyc -D.. $flags $g >&! $g.out
  if ($?) then
    if (-e $g.expect_fail) then
      echo $g "COMPILE EXPECTED FAIL"
      set expected_failed = `expr $expected_failed + 1`
    else if (-e $g.check_fail) then
      echo $g "COMPILE PASSED"
    else 
      echo $g "******** COMPILE FAILED ********"
      set failed = `expr $failed + 1`
    endif
  else
    if (-e $g.check) then
      diff $g.out $g.check
    else
      diff $g.out empty
    endif
    if ($?) then
      echo $g "******** COMPILE FAILED ********"
      set failed = `expr $failed + 1`
    else
      echo $g "COMPILE PASSED"
      if (-e $g.exec.check) then
        $VALGRIND  $g:r >&! $g.exec.out
        diff $g.exec.out $g.exec.check
        if ($?) then
          echo $g "******** EXECUTE FAILED ********"
          set failed = `expr $failed + 1`
        else
          echo $g "EXECUTE PASSED"
        endif
        python $g >&! $g.python.out
        diff $g.exec.out $g.python.out > /dev/null
        if ($?) then
          if (-e $g.python.expect_fail) then
            echo $g "PYTHON EXPECTED FAIL"
            set expected_failed = `expr $expected_failed + 1`
          else
            echo $g "******** CPYTHON VERIFY FAILED ********"
            diff $g.exec.out $g.python.out
            set failed = `expr $failed + 1`
          endif
        endif
      endif
    endif
  endif
end
echo "---------------------------------------"
if (! $failed) then
  echo "ALL tests PASSED ($expected_failed expected fails)"
else
  echo "********" $failed "test(s) FAILED (not including $expected_failed expected fails) *********"
endif
cd ..
